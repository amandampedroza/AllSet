1ª (Texto retirado da primeira refêrencia) - Class method usado para acessar todas as instâncias salvas (que chamaram o método save). Aqui usamos um @classmethod, pois faz mais sentido ser um método de classe do que de instância, pois estamos retornando informações da classe e não de uma instância isolada.

2ª Não criamos objetos em si já que o cliente não criará Banco de dados diferentes, então utiliar BancoDeDados = BancoDeDados() não funcionaria, já que os atributos principais, já estão preenchidos de forma automática na nossa API, assim não existindo a necessidade de ter um construtor (No python seria um método chamado de __init__ por boas práticas e padrão do msm jeito que o termo construtor e ele ser do msm nome da classe é uma boa prática no JAVA)

3ª Não existe encapsulamento no Python (Atributo privado), mas por conversão, usamos "__" antes do método/atributo por boa prática / convenção da comunidade de Python e não faço idéia de como surgiu essa boa prática, mas ela existe e dificulta o acesso ao método/atributo pois, por baixos dos panos o Python muda o chamado do método/atributo para _nomeDaClasse__atributo/método(), assim evitando acessos por acaso (O nome que eles dão a isso é Name Mangling e existe desde da 1ª versão do python), não utilizado por enquanto para facilitar o entendimento da API (1ª Sprint)

    pessoa = pessoas() (Criando o objeto)
        
        pessoa._pessoas__nome() (Acessando quando tem name Mangling)
        pessoa.nome (Acessando sem name Mangling)

4ª Tipos de decoradores (É aquilo de VOID e afins do JAVA): 
    
    tudo que tiver entre isso {} é pra considerar código e entre isso () é pra considerar saída

    objeto que será usado de exemplo {

        class pessoas:
            
            def __init__(self, nome):
                self.nome = nome

        pessoaCriada = pessoas('Carlos')

    }

    4.1ª @property
        Transforma o método em um atributo somente leitura:
          
            4.1.1 @property sozinho

            {
                @property
                def nome(self):
                    return self._nome
            
                pessoaCriada = pessoas('Carlos')
            
                print(pessoaCriada.nome)
                print(pessoaCriada.nome())
                pessoaCriada.nome = "Ana"

                }

            (
                resultado do 1ª print() = Carlos
                resultado do 2ª print() = TypeError: 'str' object is not callable (Ele dá esse erro, pq nome não é considerado uma função e sim um atributo já que vc criou como um property, assim não dando pra mudar esse atributo posteriormente e sim só puxar com o .nome que nem no primeiro exemplo)
                resultado da troca de nome 3ª = AttributeError: can't set attribute 'nome'

                )                    

    4.2ª @staticmethod
        É basicamente uma função dentro de um método que não se relaciona com a classe 
    
    4,3ª @classmethod

Curiosidades Python:

1ª Por padrão não existe "This" como no JAVA e sim como um parâmetro dentro do método;
2ª Python dá erro quando vc deixa um bloco de código vazio, então Python criou o comando "pass", é bem útil para testes sem quebrar o código quando você ainda não terminou de programar algum broco ou alguma saída de if por exemplo.

Refêrencias úteis para aprofundamento:

https://pythonclub.com.br/introducao-classes-metodos-python-basico.html

https://docs.python.org/pt-br/3/reference/expressions.html#atom-identifiers 
(6.2.1.1. Desfiguração de nome privado - É onde explica melhor o Name Mangling)

https://docs.python.org/pt-br/3/library/functions.html#property.deleter 
(Explicação melhor do property, deleter, getter e setter, fiquei com preguiça de explicar já que não usei nenhum, mas caso queira saber mais, tá aí)